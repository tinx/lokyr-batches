---
swagger: "2.0"
produces:
  - "application/json"
consumes:
  - "application/json"
schemes:
  - "https"
basePath: "/v1/"
securityDefinitions:
  basic_auth:
    type: "basic"
    description: "HTTP Basic Authentication with pre-shared credentials."
security:
  - "basic_auth": []
info:
  title: "Lokyr Batches"
  description: "This services manages production and ingredient batches."
  version: "1.0.0"
  contact:
    name: "Lokyr Support"
    email: "info@lokyr.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  "/batch/ingredient":
    get:
      tags:
        - "ingredient batch"
      operationId: "ingredientBatchList"
      summary: "List all ingredient batches"
      description: >
        This returns a list of ingredient batches. There is no
        pagination. The entire list will be returned in one response.
        The list will only contain those batches that the user has
        access to.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ingredientBatch"
    post:
      tags:
        - "ingredient batch"
      operationId: "ingredientBatchCreate"
      summary: "Add a new ingredient batch"
      description: >
        Create a new ingredient batch record and insert it into the
        database. The initial status will be 'in stock'. If no batch name is
        specified, a name will be auto-generated.
      parameters:
        - name: "body"
          in: "body"
          description: "Batch ingredient object."
          required: true
          schema:
            $ref: '#/definitions/ingredientBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredientBatch"
        400:
          description: "Invalid batch data supplied."
        404:
          description: "productId not found."
  "/batch/ingredient/{batchId}":
    get:
      tags:
        - "ingredient batch"
      operationId: "ingredientBatchRead"
      summary: "Read ingredient batch"
      description: >
        Fetch information on a specific ingredient batch.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to fetch."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredientBatch"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    put:
      tags:
        - "ingredient batch"
      operationId: "ingredientBatchUpdate"
      summary: "Update ingredient batch"
      description: >
        Update ingredient batch properties.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to update."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "Batch ingredient object."
          required: true
          schema:
            $ref: '#/definitions/ingredientBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredientBatch"
        400:
          description: "Invalid values supplied."
        404:
          description: "batch not found."
    delete:
      tags:
        - "ingredient batch"
      operationId: "ingredientBatchDelete"
      summary: "Delete ingredient batch"
      description: >
        Removes the record of the ingredient batch. This operation
        is only possible if there are no other records linked to
        this one.

        If any inspection reports, documents, split batches or other
        records reference a ingredient batch, it can not be deleted.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to delete."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "batch not found"
  "/batch/ingredient/{batchId}/event":
    get:
      tags:
        - "ingredient batch event"
      operationId: "ingredientBatchEventList"
      summary: "Get a list of ingredient batch events."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "class"
          in: "query"
          description: "Event type prefixes to filter by."
          type: "array"
          items:
            type: "string"
            enum:
              - "measurement/"
              - "production/"
              - "note"
              - "other"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "ingredient batch event"
      operationId: "ingredientBatchEventCreate"
      summary: "Add ingredient batch event"
      description: >
        Add an event record to a ingredient batch. The event type data
        is a list of keys and values and will be interpreted in different
        ways, depending on the event type.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The event record to add."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/ingredient/{batchId}/event/{eventId}":
    get:
      tags:
        - "ingredient batch event"
      operationId: "ingredientBatchEventRead"
      summary: "Fetch an ingredient batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    put:
      tags:
        - "ingredient batch event"
      operationId: "ingredientBatchEventUpdate"
      summary: "Update an ingredient batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The event record."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    delete:
      tags:
        - "ingredient batch event"
      operationId: "ingredientBatchEventDelete"
      summary: "Delete an ingredient batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
  "/batch/ingredient/{batchId}/document":
    get:
      tags:
        - "ingredient batch document"
      operationId: "ingredientBatchDocumentList"
      summary: "Get a list of ingredient batch documents."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "ingredient batch document"
      operationId: "ingredientBatchDocumentCreate"
      summary: "Add ingredient batch document"
      description: >
        Add a document record to a ingredient batch.
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "name"
          in: "formData"
          description: "The name of the document to add."
          type: "string"
        - name: "type"
          in: "formData"
          type: "string" 
          description: "The type of document to add."
          enum:
            - "photo"
            - "video"
            - "invoice"
            - "delivery note"
            - "lab report"
            - "other"
          required: true
        - name: "file"
          type: "file"
          in: "formData"
          description: "The document content."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/document"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/ingredient/{batchId}/document/{documentId}":
    get:
      tags:
        - "ingredient batch document"
      operationId: "ingredientBatchDocumentRead"
      summary: "Fetch an ingredient batch document."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
    put:
      tags:
        - "ingredient batch document"
      operationId: "ingredientBatchDocumentUpdate"
      summary: "Update an ingredient batch document."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The document record."
          required: true
          schema:
            $ref: '#/definitions/document'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
    delete:
      tags:
        - "ingredient batch document"
      operationId: "ingredientBatchDocumentDelete"
      summary: "Delete an ingredient batch document."
      description: >
        Removes the record of the document. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the ingredient batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
  "/batch/production":
    get:
      tags:
        - "production batch"
      operationId: "productionBatchList"
      summary: "List all production batches"
      description: >
        This returns a list of production batches. There is no
        pagination. The entire list will be returned in one response.
        The list will only contain those batches that the user has
        access to.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/productionBatch"
    post:
      tags:
        - "production batch"
      operationId: "productionBatchCreate"
      summary: "Add a new production batch"
      description: >
        Create a new production batch record and insert it into the
        database. The initial status will be 'setup'. If no batch name is
        specified, a name will be auto-generated.
      parameters:
        - name: "body"
          in: "body"
          description: "Batch production object."
          required: true
          schema:
            $ref: '#/definitions/productionBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batch size supplied."
        404:
          description: "productId not found."
  "/batch/production/{batchId}":
    get:
      tags:
        - "production batch"
      operationId: "productionBatchRead"
      summary: "Read production batch"
      description: >
        Fetch information on a specific production batch.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to fetch."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    put:
      tags:
        - "production batch"
      operationId: "productionBatchUpdate"
      summary: "Update production batch"
      description: >
        Update production batch properties.

        Setting the status to 'bottled' is a special operation and
        requires also setting the 'bottlingDate', 'bestBeforeDate',
        'retainedSamples' and 'alcoholContent' fields.

        These three fields can only be set when the status is being
        changed to 'bottled'. 'alcoholContent' can also be changed
        again.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to update."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "Batch production object."
          required: true
          schema:
            $ref: '#/definitions/productionBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid values supplied."
        404:
          description: "batch not found."
    delete:
      tags:
        - "production batch"
      operationId: "productionBatchDelete"
      summary: "Delete production batch"
      description: >
        Removes the record of the production batch. This operation
        is only possible if there are no other records linked to
        this one.

        If any inspection reports, documents, split batches or other
        records reference a production batch, it can not be deleted.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to delete."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "batch not found"
  "/batch/production/{batchId}/split":
    post:
      tags:
        - "production batch"
      operationId: "productionBatchSplit"
      summary: "Split production batch"
      description: >
        Split a production batch in two. The new production batch
        is created in the database and it's record returned. The amount
        specified will be the designated size of the new batch. The
        size of the original batch will be reduced by this amount.

        The new production batch will inherit the state of the original
        batch. Reports, documents, measurements and other batch
        specific records will not be copied.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to split."
          required: true
          type: "integer"
          format: "uint64"
        - name: "size"
          in: "query"
          description: "Amount to split off, in liters."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId or size supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/blend":
    post:
      tags:
        - "production batch"
      operationId: "productionBatchBlend"
      summary: "Blend production batches"
      description: >
        Combine (blend) two production batches, resulting in a new
        production batch containing the entire volumes of both
        source batches.

        The state of both source batches will be set to 'gone'.

        The state of the new batch will be the least advanced state
        of either source batch. Reports, documents, measurements and
        other batch specific records will not be copied.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the either batch of the blend."
          required: true
          type: "integer"
          format: "uint64"
        - name: "secondBatchId"
          in: "query"
          description: "ID of the other batch to be added to the blend."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/event":
    get:
      tags:
        - "production batch event"
      operationId: "productionBatchEventList"
      summary: "Get a list of production batch events."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "class"
          in: "query"
          description: "Event type prefixes to filter by."
          type: "array"
          items:
            type: "string"
            enum:
              - "measurement/"
              - "production/"
              - "note"
              - "other"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "production batch event"
      operationId: "productionBatchEventCreate"
      summary: "Add production batch event"
      description: >
        Add an event record to a production batch. The event type data
        is a list of keys and values and will be interpreted in different
        ways, depending on the event type.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The event record to add."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/event/{eventId}":
    get:
      tags:
        - "production batch event"
      operationId: "productionBatchEventRead"
      summary: "Fetch a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    put:
      tags:
        - "production batch event"
      operationId: "productionBatchEventUpdate"
      summary: "Update a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The event record."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    delete:
      tags:
        - "production batch event"
      operationId: "productionBatchEventDelete"
      summary: "Delete a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
  "/batch/production/{batchId}/shipment":
    get:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentList"
      summary: "Get a list of production batch shipments."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentCreate"
      summary: "Add production batch shipment"
      description: >
        Add a shipment record to a production batch.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The shipment record to add."
          required: true
          schema:
            $ref: '#/definitions/shipment'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/shipment/{shipmentId}":
    get:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentRead"
      summary: "Fetch a production batch shipment."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "shipmentId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
    put:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentUpdate"
      summary: "Update a production batch shipment."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "shipmentId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The shipment record."
          required: true
          schema:
            $ref: '#/definitions/shipment'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
    delete:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentDelete"
      summary: "Delete a production batch shipment."
      description: >
        Removes the record of the shipment. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "shipmentId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
  "/batch/production/{batchId}/document":
    get:
      tags:
        - "production batch document"
      operationId: "productionBatchDocumentList"
      summary: "Get a list of production batch documents."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "production batch document"
      operationId: "productionBatchDocumentCreate"
      summary: "Add production batch document"
      description: >
        Add a document record to a production batch.
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "name"
          in: "formData"
          description: "The name of the document to add."
          type: "string"
        - name: "type"
          in: "formData"
          type: "string" 
          description: "The type of document to add."
          enum:
            - "photo"
            - "video"
            - "invoice"
            - "delivery note"
            - "lab report"
            - "other"
          required: true
        - name: "file"
          type: "file"
          in: "formData"
          description: "The document content."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/document"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/document/{documentId}":
    get:
      tags:
        - "production batch document"
      operationId: "productionBatchDocumentRead"
      summary: "Fetch a production batch document."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
    put:
      tags:
        - "production batch document"
      operationId: "productionBatchDocumentUpdate"
      summary: "Update a production batch document."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "The document record."
          required: true
          schema:
            $ref: '#/definitions/document'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/document"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
    delete:
      tags:
        - "production batch document"
      operationId: "productionBatchDocumentDelete"
      summary: "Delete a production batch document."
      description: >
        Removes the record of the document. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "uint64"
        - name: "documentId"
          in: "path"
          description: "ID of the document."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or documentId supplied."
        404:
          description: "batch or document not found."
  "/product":
    get:
      tags:
        - "product"
      operationId: "productList"
      summary: >
        Retrieve a list of all registered products.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/product'
    post:
      tags:
        - "product"
      operationId: "productCreate"
      summary: "Add a new product"
      description: >
        Create a new product record and insert it into the database.
      parameters:
        - name: "body"
          in: "body"
          description: "Product object."
          required: true
          schema:
            $ref: '#/definitions/product'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
  "/product/{productId}":
    get:
      tags:
        - "product"
      operationId: "productRead"
      summary: "Read product"
      description: >
        Fetch information on a specific product.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        400:
          description: "Invalid productId supplied."
        404:
          description: "product not found."
    put:
      tags:
        - "product"
      operationId: "productUpdate"
      summary: "Update product"
      description: >
        Update product properties.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to update."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "Product object."
          required: true
          schema:
            $ref: '#/definitions/product'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        400:
          description: "Invalid values supplied."
        404:
          description: "product not found."
    delete:
      tags:
        - "product"
      operationId: "productDelete"
      summary: "Delete product"
      description: >
        Removes the record of the product. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to delete."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "product not found"
  "/thirdParty":
    get:
      tags:
        - "third party"
      operationId: "thirdPartyList"
      summary: >
        Retrieve a list of all registered third parties.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/thirdParty'
    post:
      tags:
        - "third party"
      operationId: "thirdPartyCreate"
      summary: "Add a new third party"
      description: >
        Create a new third party record and insert it into the database.
      parameters:
        - name: "body"
          in: "body"
          description: "thirdParty object."
          required: true
          schema:
            $ref: '#/definitions/thirdParty'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/thirdParty"
  "/thirdParty/{thirdPartyId}":
    get:
      tags:
        - "third party"
      operationId: "thirdPartyRead"
      summary: "Read event type"
      description: >
        Fetch information on a specific event type.
      parameters:
        - name: "thirdPartyId"
          in: "path"
          description: "ID of the third party."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/thirdParty"
        400:
          description: "Invalid thirdPartyId supplied."
        404:
          description: "third party not found."
    put:
      tags:
        - "third party"
      operationId: "thirdPartyUpdate"
      summary: "Update third party"
      description: >
        Update third party properties.
      parameters:
        - name: "thirdPartyId"
          in: "path"
          description: "ID of the third party to update."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "thirdParty object."
          required: true
          schema:
            $ref: '#/definitions/thirdParty'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/thirdParty"
        400:
          description: "Invalid thirdPartyId supplied."
        404:
          description: "third party not found."
    delete:
      tags:
        - "third party"
      operationId: "thirdPartyDelete"
      summary: "Delete third party"
      description: >
        Removes the record of the third party. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "thirdPartyId"
          in: "path"
          description: "ID of the third party to delete."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "third party not found"
  "/ingredient":
    get:
      tags:
        - "ingredient"
      operationId: "ingredientList"
      summary: >
        Retrieve a list of all registered ingredients.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ingredient'
    post:
      tags:
        - "ingredient"
      operationId: "ingredientCreate"
      summary: "Add a new ingredient"
      description: >
        Create a new ingredient record and insert it into the database.
      parameters:
        - name: "body"
          in: "body"
          description: "ingredient object."
          required: true
          schema:
            $ref: '#/definitions/ingredient'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredient"
  "/ingredient/{ingredientId}":
    get:
      tags:
        - "ingredient"
      operationId: "ingredientRead"
      summary: "Read ingredient"
      description: >
        Fetch information on a specific ingredient.
      parameters:
        - name: "ingredientId"
          in: "path"
          description: "ID of the ingredient."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredient"
        400:
          description: "Invalid ingredientId supplied."
        404:
          description: "ingredient not found."
    put:
      tags:
        - "ingredient"
      operationId: "ingredientUpdate"
      summary: "Update ingredient"
      description: >
        Update ingredient properties.
      parameters:
        - name: "ingredientId"
          in: "path"
          description: "ID of the ingredient to update."
          required: true
          type: "integer"
          format: "uint64"
        - name: "body"
          in: "body"
          description: "ingredient object."
          required: true
          schema:
            $ref: '#/definitions/ingredient'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ingredient"
        400:
          description: "Invalid ingredientId supplied."
        404:
          description: "ingredient not found."
    delete:
      tags:
        - "ingredient"
      operationId: "ingredientDelete"
      summary: "Delete ingredient"
      description: >
        Removes the record of the ingredient. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "ingredientId"
          in: "path"
          description: "ID of the ingredient to delete."
          required: true
          type: "integer"
          format: "uint64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "ingredient not found"
definitions:
  productionBatch:
    type: "object"
    required:
      - productId
      - size
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this production batch."
        readOnly: true
      productId:
        type: "integer"
        format: "uint64"
        title: "ID of the type of product to be produced."
      name:
        type: "string"
        title: "Name of this batch."
      size:
        type: "integer"
        format: "uint64"
        title: "Size of the production batch, in liters."
      parentBatches:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
        title: "ID(s) of the parent batch(es)."
        minItems: 0
        maxItems: 2
        description: >
          If set, this indicates that this batch was created by splitting
          another production batch in two, or by blending two other
          production batches. The original batch IDs are given
          in this paramter. If empty, indicates that this batch was
          created from scratch.
        readOnly: true
      childBatches:
        type: "array"
        items:
          type: "integer"
          format: "uint64"
        title: "IDs of child batches."
        description: >
          A list of batch IDs referencing production batches that have
          been created by splitting amounts off of this batch.
        readOnly: true
      status:
        type: "string"
        title: "Production status of this batch."
        description: >
          This describes the production status, or phase, of this
          batch. The status can only be updated following the forward
          progression.

          Changing the status to 'bottled' requires also updating
          the fields 'bottlingDate', 'bestBeforeDate', 'retainedSamples' and
          'alcoholContent' in the same request.
        enum:
          - "setup"
          - "fermenting"
          - "partially filtered"
          - "filtered"
          - "ready for bottling"
          - "bottled"
          - "gone"
      bottlingDate:
        type: "string"
        format: "date"
        title: "Date of bottling of this batch."
        description: >
          Date of bottling of this production batch. Note that batches
          can't be partially bottled. Split the batch before bottling
          if you aren't bottling the entire volume.
      bestBeforeDate:
        type: "string"
        format: "date"
        title: "Guaranteed minimum shelf life."
        description: >
          Guaranteed 'best before' date for the bottled product. Note that
          the best before date must be set for batches when the status is
          set to 'bottled' and can't be set before that.
        readOnly: true
      alcoholContent:
        type: "number"
        format: "float"
        title: "Per volume content of alcohol."
        description: >
          Alcohol content (in percent per volume) of the production batch
          when it was bottled. This value must be set when the status
          is changed to 'bottled' and can't be set before that. It can
          be changed, later, though.

          Information on the alcohol content at other times during the
          production process can be recorded as a 'measurement' entry.
      retainedSamples:
        type: "integer"
        format: "uint64"
        title: "Number of retained samples."
        description: >
          When a production batch is bottled, a sample must be retained.
          This property serves as a counter of retained samples, as well
          as a reminder to put a sample aside. In all client implementations,
          the user should have to manually set this value to at least one.
          Changing the state of a production batch to 'bottled' without
          also setting retainedSamples to at least one will result in
          an error.
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this batch. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  product:
    type: "object"
    required:
      - name
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this product."
        readOnly: true
      name:
        type: "string"
        title: "Unique name of this product."
  event:
    type: "object"
    required:
      - type
      - dateTime
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this event."
        readOnly: true
      type:
        $ref: '#/definitions/eventType'
        type: "integer"
        format: "uint64"
        title: "Event type ID."
      dateTime:
        type: "string"
        format: "dateTime"
        title: "Date and time when the event took place."
      properies:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this event. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  eventType:
    type: "string"
    enum:
      - "production/setup"
      - "production/fermentation start"
      - "production/fermentation stop"
      - "production/filtering"
      - "production/racking"
      - "production/bottling"
      - "production/labeling"
      - "measurement/volume"
      - "measurement/temperature"
      - "measurement/acidity"
      - "measurement/alcohol"
      - "measurement/methanol"
      - "measurement/ethanol"
      - "measurement/CO2 production"
      - "measurement/inspection"
      - "measurement/tasting"
      - "note"
      - "other"
  shipment:
    type: "object"
    required:
      - thirdPartyId
      - productionBatchId
      - date
      - units
      - amount
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this shipment."
        readOnly: true
      productionBatchId:
        type: "integer"
        format: "uint64"
        title: "Production batch ID."
      thirdPartyId:
        type: "integer"
        format: "uint64"
        title: "ID of this shipment."
      date:
        type: "string"
        format: "date"
        title: "Date of delivery."
      units:
        type: "string"
        title: "Units used to deliver."
        enum:
          - "bottles (0.75l)"
          - "bottles (0.5l)"
          - "liters"
      amount:
        type: "integer"
        format: "uint64"
        title: "Amount of units shipped."
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this shipment. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  document:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this document."
        readOnly: true
      type:
        type: "string"
        enum:
          - "photo"
          - "video"
          - "invoice"
          - "delivery note"
          - "lab report"
          - "other"
      name:
        type: "string"
        title: "Document name."
      URL:
        type: "string"
        title: "Document download URL."
        readOnly: true
      uploadDate:
        type: "string"
        format: "date"
        title: "Day of document upload."
  thirdParty:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this party."
        readOnly: true
      name:
        type: "string" 
        title: "Name of the organization or person."
      contact:
        type: "string" 
        title: "Contact name of the third party."
      address:
        type: "string" 
        title: "Address of the third party."
      city:
        type: "string" 
        title: "City of the third party."
      zip:
        type: "string" 
        title: "Zip code of the third party."
      country:
        type: "string" 
        title: "Country of the third party."
      phone:
        type: "string" 
        title: "Phone number of the third party."
      email:
        type: "string" 
        title: "Email address of the third party."
      homepage:
        type: "string" 
        title: "Homepage URL of the third party."
      ourId:
        type: "string" 
        title: "How they refer to us."
      thirdPartyId:
        type: "string"
        title: "Reference ID for third party (future use)"
        description: >
          This property is for future use. At the moment there is no
          CRM or address database to link to, but if one were added,
          this ID could be used to reference records in that system.
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this shipment. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  ingredient:
    type: "object"
    required:
      - manufacturerId
      - name
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this ingredient."
        readOnly: true
      name:
        type: "string"
        title: "name of the ingredient."
      manufacturerId:
        type: "integer"
        format: "uint64"
        title: "thirdPartyId of the manufacturer."
      manufacturerBatchName:
        type: "string"
        title: "Batch designation by the manufacturer."
      defaultPackageUnit:
        type: "string"
        title: "The unit this ingredient should be counted in."
        enum:
          - "pieces"
          - "ml"
          - "l"
          - "mg"
          - "g"
          - "kg"
      defaultPackageAmount:
        type: "number"
        format: "double"
        title: "Number of units in a typical batch."
  ingredientBatch:
    type: "object"
    required:
      - ingredientId
      - supplierId
      - deliveryDate
      - unit
      - amount
      - bestBeforeDate
    properties:
      id:
        type: "integer"
        format: "uint64"
        title: "ID of this ingredient batch."
        readOnly: true
      ingredientId:
        type: "integer"
        format: "uint64"
        title: "ID of the type of ingredient."
      name:
        type: "string"
        title: "Name of this batch."
      supplierId:
        type: "integer"
        format: "uint64"
        title: "thirdPartyID of the supplier."
      deliveryDate:
        type: "string"
        format: "date"
        title: "Date of delivery of this batch."
      unit:
        type: "string"
        title: "The unit this ingredient was delivered in."
        enum:
          - "pieces"
          - "ml"
          - "l"
          - "mg"
          - "g"
          - "kg"
      amount:
        type: "integer"
        format: "uint64"
        title: "Amount of units delivered in this batch."
      bestBeforeDate:
        type: "string"
        format: "date"
        title: "Guaranteed minimum shelf life."
        description: >
          Guaranteed 'best before' date for this batch.
      status:
        type: "string"
        title: "Availability status of this batch."
        description: >
          This describes the ingredient availability status of this
          batch. The status can only be updated following the forward
          progression.
        enum:
          - "ordered"
          - "in stock"
          - "gone"
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this batch. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"

