---
swagger: "2.0"
produces:
  - "application/json"
consumes:
  - "application/json"
schemes:
  - "https"
basePath: "/v1/"
securityDefinitions:
  basic_auth:
    type: "basic"
    description: "HTTP Basic Authentication with pre-shared credentials."
security:
  - "basic_auth": []
info:
  title: "Lokyr Batches"
  description: "This services manages production and ingredient batches."
  version: "1.0.0"
  contact:
    name: "Lokyr Support"
    email: "info@lokyr.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  "/batch/production":
    get:
      tags:
        - "production batch"
      operationId: "productionBatchList"
      summary: "List all production batches"
      description: >
        This returns a list of production batches. There is no
        pagination. The entire list will be returned in one response.
        The list will only contain those batches that the user has
        access to.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/productionBatch"
    post:
      tags:
        - "production batch"
      operationId: "productionBatchCreate"
      summary: "Add a new production batch"
      description: >
        Create a new production batch record and insert it into the
        database. The initial status will be 'setup'. If no batch name is
        specified, a name will be auto-generated.
      parameters:
        - name: "body"
          in: "body"
          description: "Batch production object."
          required: true
          schema:
            $ref: '#/definitions/productionBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batch size supplied."
        404:
          description: "productId not found."
  "/batch/production/{batchId}":
    get:
      tags:
        - "production batch"
      operationId: "productionBatchRead"
      summary: "Read production batch"
      description: >
        Fetch information on a specific production batch.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to fetch."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    put:
      tags:
        - "production batch"
      operationId: "productionBatchUpdate"
      summary: "Update production batch"
      description: >
        Update production batch properties.

        Setting the status to 'bottled' is a special operation and
        requires also setting the 'bottlingDate', 'bestBeforeDate' and
        'alcoholContent' fields.

        These three fields can only be set when the status is being
        changed to 'bottled'. 'alcoholContent' can also be changed
        again.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to update."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Batch production object."
          required: true
          schema:
            $ref: '#/definitions/productionBatch'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid values supplied."
        404:
          description: "batch not found."
    delete:
      tags:
        - "production batch"
      operationId: "productionBatchDelete"
      summary: "Delete production batch"
      description: >
        Removes the record of the production batch. This operation
        is only possible if there are no other records linked to
        this one.

        If any inspection reports, documents, split batches or other
        records reference a production batch, it can not be deleted.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to delete."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "batch not found"
  "/batch/production/{batchId}/split":
    post:
      tags:
        - "production batch"
      operationId: "productionBatchSplit"
      summary: "Split production batch"
      description: >
        Split a production batch in two. The new production batch
        is created in the database and it's record returned. The amount
        specified will be the designated size of the new batch. The
        size of the original batch will be reduced by this amount.

        The new production batch will inherit the state of the original
        batch. Reports, documents, measurements and other batch
        specific records will not be copied.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch to split."
          required: true
          type: "integer"
          format: "int64"
        - name: "size"
          in: "query"
          description: "Amount to split off, in liters."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId or size supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/blend":
    post:
      tags:
        - "production batch"
      operationId: "productionBatchBlend"
      summary: "Blend production batches"
      description: >
        Combine (blend) two production batches, resulting in a new
        production batch containing the entire volumes of both
        source batches.

        The state of both source batches will be set to 'gone'.

        The state of the new batch will be the least advanced state
        of either source batch. Reports, documents, measurements and
        other batch specific records will not be copied.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the either batch of the blend."
          required: true
          type: "integer"
          format: "int64"
        - name: "secondBatchId"
          in: "query"
          description: "ID of the other batch to be added to the blend."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/productionBatch"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/event":
    get:
      tags:
        - "production batch event"
      operationId: "productionBatchEventList"
      summary: "Get a list of production batch events."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "class"
          in: "query"
          description: "Event classes to filter by."
          type: "array"
          items:
            type: "string"
            enum:
              - "measurement"
              - "production step"
              - "other"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "production batch event"
      operationId: "productionBatchEventCreate"
      summary: "Add production batch event"
      description: >
        Add an event record to a production batch. The event type data
        is a list of keys and values and will be interpreted in different
        ways, depending on the event type.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "The event record to add."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/event"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/event/{eventId}":
    get:
      tags:
        - "production batch event"
      operationId: "productionBatchEventRead"
      summary: "Fetch a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    put:
      tags:
        - "production batch event"
      operationId: "productionBatchEventUpdate"
      summary: "Update a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "The event record."
          required: true
          schema:
            $ref: '#/definitions/event'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/event"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
    delete:
      tags:
        - "production batch event"
      operationId: "productionBatchEventDelete"
      summary: "Delete a production batch event."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "eventId"
          in: "path"
          description: "ID of the event."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or eventId supplied."
        404:
          description: "batch or event not found."
  "/batch/production/{batchId}/shipment":
    get:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentList"
      summary: "Get a list of production batch shipments."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
    post:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentCreate"
      summary: "Add production batch shipment"
      description: >
        Add a shipment record to a production batch.
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "The shipment record to add."
          required: true
          schema:
            $ref: '#/definitions/shipment'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId supplied."
        404:
          description: "batch not found."
  "/batch/production/{batchId}/shipment/{shipmentId}":
    get:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentRead"
      summary: "Fetch a production batch shipment."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "shipmentId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
    put:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentUpdate"
      summary: "Update a production batch shipment."
      parameters:
        - name: "batchId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "shipmentId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "The shipment record."
          required: true
          schema:
            $ref: '#/definitions/shipment'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/shipment"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
    delete:
      tags:
        - "production batch shipment"
      operationId: "productionBatchShipmentDelete"
      summary: "Delete a production batch shipment."
      parameters:
        - name: "shipmentId"
          in: "path"
          description: "ID of the production batch."
          required: true
          type: "integer"
          format: "int64"
        - name: "eventId"
          in: "path"
          description: "ID of the shipment."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid batchId or shipmentId supplied."
        404:
          description: "batch or shipment not found."
  "/product":
    get:
      tags:
        - "product"
      operationId: "productList"
      summary: >
        Retrieve a list of all registered products.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/product'
    post:
      tags:
        - "product"
      operationId: "productCreate"
      summary: "Add a new product"
      description: >
        Create a new product record and insert it into the database.
      parameters:
        - name: "body"
          in: "body"
          description: "Product object."
          required: true
          schema:
            $ref: '#/definitions/product'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
  "/product/{productId}":
    get:
      tags:
        - "product"
      operationId: "productRead"
      summary: "Read product"
      description: >
        Fetch information on a specific product.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        400:
          description: "Invalid productId supplied."
        404:
          description: "product not found."
    put:
      tags:
        - "product"
      operationId: "productUpdate"
      summary: "Update product"
      description: >
        Update product properties.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to update."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Product object."
          required: true
          schema:
            $ref: '#/definitions/product'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        400:
          description: "Invalid values supplied."
        404:
          description: "product not found."
    delete:
      tags:
        - "product"
      operationId: "productDelete"
      summary: "Delete product"
      description: >
        Removes the record of the product. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to delete."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "product not found"
  "/eventType":
    get:
      tags:
        - "event type"
      operationId: "eventTypeList"
      summary: >
        Retrieve a list of all registered event types.
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/eventType'
    post:
      tags:
        - "event type"
      operationId: "eventTypeCreate"
      summary: "Add a new event type"
      description: >
        Create a new event type record and insert it into the database.
      parameters:
        - name: "body"
          in: "body"
          description: "eventType object."
          required: true
          schema:
            $ref: '#/definitions/eventType'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/eventType"
  "/eventType/{eventTypeId}":
    get:
      tags:
        - "event type"
      operationId: "eventTypeRead"
      summary: "Read event type"
      description: >
        Fetch information on a specific event type.
      parameters:
        - name: "eventTypeId"
          in: "path"
          description: "ID of the event type."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/eventType"
        400:
          description: "Invalid eventTypeId supplied."
        404:
          description: "event type not found."
    put:
      tags:
        - "event type"
      operationId: "eventTypeUpdate"
      summary: "Update event type"
      description: >
        Update event type properties.
      parameters:
        - name: "eventTypeId"
          in: "path"
          description: "ID of the event type to update."
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "eventType object."
          required: true
          schema:
            $ref: '#/definitions/eventType'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/eventType"
        400:
          description: "Invalid eventTypeId supplied."
        404:
          description: "event type not found."
    delete:
      tags:
        - "event type"
      operationId: "eventTypeDelete"
      summary: "Delete event type"
      description: >
        Removes the record of the event type. This operation
        is only possible if there are no other records linked to
        this one.
      parameters:
        - name: "eventTypeId"
          in: "path"
          description: "ID of the event type to delete."
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid ID supplied"
        404:
          description: "product not found"
definitions:
  productionBatch:
    type: "object"
    required:
      - productId
      - size
    properties:
      id:
        type: "integer"
        format: "int64"
        title: "ID of this production batch."
        readOnly: true
      productId:
        type: "integer"
        format: "int64"
        title: "ID of the type of product to be produced."
      name:
        type: "string"
        title: "Name of this batch."
      size:
        type: "integer"
        format: "int64"
        title: "Size of the production batch, in liters."
      parentBatches:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        title: "ID(s) of the parent batch(es)."
        minItems: 0
        maxItems: 2
        description: >
          If set, this indicates that this batch was created by splitting
          another production batch in two, or by blending two other
          production batches. The original batch IDs are given
          in this paramter. If empty, indicates that this batch was
          created from scratch.
        readOnly: true
      childBatches:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        title: "IDs of child batches."
        description: >
          A list of batch IDs referencing production batches that have
          been created by splitting off amounts off of this batch.
        readOnly: true
      status:
        type: "string"
        title: "Production status of this batch."
        description: >
          This describes the production status, or phase, of this
          batch. The status can only be updated following the forward
          progression.

          Changing the status to 'bottled' requires also updating
          the fields 'bottlingDate', 'bestBeforeDate' and
          'alcoholContent' in the same request.
        enum:
          - "setup"
          - "fermenting"
          - "partially filtered"
          - "filtered"
          - "ready for bottling"
          - "bottled"
          - "gone"
      bottlingDate:
        type: "string"
        format: "date"
        title: "Date of bottling of this batch."
        description: >
          Date of bottling of this production batch. Note that batches
          can't be partially bottled. Split the batch before bottling
          if you aren't bottling the entire volume.
      bestBeforeDate:
        type: "string"
        format: "date"
        title: "Guaranteed minimum shelf life."
        description: >
          Guaranteed 'best before' date for the bottled product. Note that
          the best before date must be set for batches when the status is
          set to 'bottled' and can't be set before that.
        readOnly: true
      alcoholContent:
        type: "number"
        format: "float"
        title: "Per volume content of alcohol."
        description: >
          Alcohol content (in percent per volume) of the production batch
          when it was bottled. This value must be set when the status
          is changed to 'bottled' and can't be set before that. It can
          be changed, later, though.

          Information on the alcohol content at other times during the
          production process can be recorded as a 'measurement' entry.
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this batch. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  product:
    type: "object"
    required:
      - name
    properties:
      id:
        type: "integer"
        format: "int64"
        title: "ID of this product."
        readOnly: true
      name:
        type: "string"
        title: "Unique name of this product."
  event:
    type: "object"
    required:
      - type
      - dateTime
    properties:
      id:
        type: "integer"
        format: "int64"
        title: "ID of this event."
        readOnly: true
      type:
        type: "integer"
        format: "int64"
        title: "Event type ID."
      dateTime:
        type: "string"
        format: "dateTime"
        title: "Date and time when the event took place."
      properies:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this event. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"
  eventType:
    type: "object"
    required:
      - name
      - class
    properties:
      id:
        type: "integer"
        format: "int64"
        title: "ID of this event type."
        readOnly: true
      name:
        type: "string" 
        title: "Internal name for this event type."
      class:
        type: "string"
        title: "Event family or class or event."
        enum:
          - "measurement"
          - "production step"
          - "other"
  shipment:
    type: "object"
    required:
      - name
      - address
      - productionBatchId
      - date
      - units
      - amount
    properties:
      id:
        type: "integer"
        format: "int64"
        title: "ID of this shipment."
        readOnly: true
      productionBatchId:
        type: "integer"
        format: "int64"
        title: "Production batch ID."
      name:
        type: "string" 
        title: "Name of the recipient."
      address:
        type: "string" 
        title: "Address of the recipient."
      recipientId:
        type: "string"
        title: "Reference ID for recipient (future use)"
        description: >
          This property is for future use. At the moment there is no
          CRM or address database to link to, but if one were added,
          this ID could be used to reference records in that system.
      date:
        type: "string"
        format: "date"
        title: "Date of delivery."
      units:
        type: "string"
        title: "Units used to deliver."
        enum:
          - "bottles (0.75l)"
          - "bottles (0.5l)"
          - "liters"
      amount:
        type: "integer"
        format: "uint64"
        title: "Amount of units shipped."
      properties:
        type: "object"
        title: "Arbitrary key-value data."
        description: >
          Arbitrary data to be stored for this shipment. Key and value have
          to be strings. Storing an empty value ("") will remove the
          key entirely.
          Omitting existing keys does not remove them. The property maps
          will be merged.
        additionalProperties:
          type: "string"

